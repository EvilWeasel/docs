worker_processes 1;

events {
  worker_connections 1024;
}

http {
  server {
    listen 443 ssl;
    server_name _;

    ssl_certificate /certs/cert.pem;
    ssl_certificate_key /certs/cert-key.pem;

    root /usr/share/nginx/html;
    index index.html index.htm;
    include /etc/nginx/mime.types;

    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    error_page 404 /404.html;
    location = /404.html {
      root /usr/share/nginx/html;
      internal;
    }

    location / {
      # Allow CORS from specific origins
      add_header 'Access-Control-Allow-Origin' 'https://cdn.discordapp.com/*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header Permissions-Policy interest-cohort=();

      # Handle preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'https://cdn.discordapp.com/*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        return 204;
      }
      root /usr/share/nginx/html;
      try_files $uri $uri/ /index.html;
    }

  }
  # Redirect all HTTP requests to HTTPS
  server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
  }
}
